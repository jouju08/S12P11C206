networks:
  app-network:
    driver: bridge

services:
  # backend
  backend:
    build: ./backend
    ports:
      - "${SPRING_PORT}:${SPRING_PORT}"
    depends_on:
      - mysql
      - redis
    networks:
      - app-network
    environment:
      - SPRING_DB_URL=${SPRING_DB_URL}
      - SPRING_DB_USERNAME=${SPRING_DB_USERNAME}
      - SPRING_DB_PASSWORD=${SPRING_DB_PASSWORD}
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - REDIS_EXPIRE_TIME=${REDIS_EXPIRE_TIME}
      - SPRING_MAIL_HOST=${SPRING_MAIL_HOST}
      - SPRING_MAIL_USERNAME=${SPRING_MAIL_USERNAME}
      - SPRING_MAIL_PASSWORD=${SPRING_MAIL_PASSWORD}
      - SPRING_MAIL_PORT=${SPRING_MAIL_PORT}
      - AWS_S3_BUCKET=${AWS_S3_BUCKET}
      - AWS_S3_ACCESS=${AWS_S3_ACCESS}
      - AWS_S3_SECRET=${AWS_S3_SECRET}
      - AWS_S3_REGION=${AWS_S3_REGION}
      - SPRING_PORT=${SPRING_PORT}
      - FRONT_PORT=${FRONT_PORT}
      - MYSQL_PORT=${MYSQL_PORT}
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - JWT_SECRET=${JWT_SECRET}
      - oauth_kakao_client_id=${oauth_kakao_client_id}
      - oauth_kakao_secert=${oauth_kakao_secert}
      - oauth_kakao_redirect_uri=${oauth_kakao_redirect_uri}
  # frontend
  frontend:
    build: ./frontend
    ports:
      - "${FRONT_PORT}:80"
    volumes:
      - /home/ubuntu/tinker/frontend/dist:/app/dist
    networks:
      - app-network
    command: npm run build

  # redis
  redis:
    image: redis:6.2.6-alpine
    ports:
      - "${REDIS_PORT}:${REDIS_PORT}"
    command: redis-server /usr/local/etc/redis/redis.conf
    volumes:
      - ./redis/conf/redis.conf:/usr/local/etc/redis/redis.conf
      - redis-data:/data
    networks:
      - app-network

  # mysql
  mysql:
    image: mysql:8.0
    ports:
      - "${MYSQL_PORT}:${MYSQL_PORT}"
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - TZ=Asia/Seoul
    volumes:
      - ./mysql/conf/my.cnf:/etc/mysql/conf.d/my.cnf
      - mysql-data:/var/lib/mysql
    networks:
      - app-network

  # nginx
  nginx:
    build: ./nginx
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - frontend
      - backend
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/mime.types:/etc/nginx/mime.types:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - /etc/letsencrypt:/etc/letsencrypt
      - /var/www/certbot:/var/www/certbot
      - /home/ubuntu/tinker/frontend/dist:/usr/share/nginx/html:ro
    networks:
      - app-network
    command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"

  certbot:
    container_name: certbot
    image: certbot/certbot:latest
    restart: unless-stopped
    depends_on:
      - nginx
    volumes:
      - /etc/letsencrypt:/etc/letsencrypt
      - /var/www/certbot:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"

  ai:
    build: ./AI
    ports:
      - "8000:8000"
    networks:
      - app-network
    environment:
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - NOVITA_API_KEY=${NOVITA_API_KEY}
      - NAVER_OCR_SECRET_KEY=${NAVER_OCR_SECRET_KEY}
      - NAVER_OCR_INVOKE_URL=${NAVER_OCR_INVOKE_URL}
      - LANGCHAIN_TRACING_V2=${LANGCHAIN_TRACING_V2}
      - LANGCHAIN_ENDPOINT=${LANGCHAIN_ENDPOINT}
      - LANGCHAIN_API_KEY=${LANGCHAIN_API_KEY}
      - LANGCHAIN_PROJECT=${LANGCHAIN_PROJECT}
      - FAST_API_HOST=${FAST_API_HOST}
      - FAST_API_PORT=${FAST_API_PORT}
      - API_BASE_URL=${API_BASE_URL}
      - MAX_AUDIO_LENGTH=${MAX_AUDIO_LENGTH}
      - SPRING_SERVER=${SPRING_SERVER}

  openvidu:
    image: openvidu/openvidu-dev:2.31.0
    ports:
      - "4443:4443"
    environment:
      - OPENVIDU_SECRET=MY_SECRET
      - OPENVIDU_RECORDING=true
      - OPENVIDU_RECORDING_PATH=/opt/openvidu/recordings
      - OPENVIDU_DOMAIN_OR_PUBLIC_IP=i12c206.p.ssafy.io
      - OPENVIDU_CERTIFICATE=/certs/fullchain.pem
      - OPENVIDU_PRIVATE_KEY=/certs/privkey.pem
      - OPENVIDU_URL=http://i12c206.p.ssafy.io:4443/
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /opt/openvidu/recordings:/opt/openvidu/recordings
      - /etc/letsencrypt/live/i12c206.p.ssafy.io:/certs:ro
    networks:
      - app-network


volumes:
  mysql-data:
  redis-data:


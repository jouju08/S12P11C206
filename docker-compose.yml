services:
  # Backend Blue
  backend-blue:
    build: ./backend
    container_name: backend-blue
    environment:
      - SPRING_PORT=8080
      - SPRING_PROFILES_ACTIVE=blue
    env_file:
      - ./config/backend.env
    networks:
      - app-network
    expose:
      - "8080"

  # Backend Green
  backend-green:
    build: ./backend
    container_name: backend-green
    environment:
      - SPRING_PORT=8080
      - SPRING_PROFILES_ACTIVE=green
    env_file:
      - ./config/backend.env
    networks:
      - app-network
    expose:
      - "8080"

  # Frontend (빌드 후 Nginx가 정적파일을 서비스)
  frontend:
    build: ./frontend
    container_name: frontend
    volumes:
      - /home/ubuntu/MyFairy/frontend/dist:/app/dist
    env_file:
      - ./config/frontend.env
    networks:
      - app-network
    command: npm run build
    expose:
      - "2828"

  # Redis
  redis:
    image: redis:6.2.6-alpine
    container_name: redis
    volumes:
      - ./redis/conf/redis.conf:/usr/local/etc/redis/redis.conf
      - ./redis/flush-and-start.sh:/usr/local/bin/flush-and-start.sh
    command: ["sh", "/usr/local/bin/flush-and-start.sh"]
    networks:
      - app-network
    expose:
      - "6379"

  # MySQL
  mysql:
    image: mysql:8.0
    container_name: mysql
    environment:
      - TZ=Asia/Seoul
    env_file:
      - ./config/etc.env
    volumes:
      - ./mysql/conf/my.cnf:/etc/mysql/conf.d/my.cnf
      - ./mysql/init:/docker-entrypoint-initdb.d
      - mysql-data:/var/lib/mysql
    networks:
      - app-network
    expose:
      - "3306"

  # Nginx (프록시 및 정적파일 제공)
  nginx:
    build: ./nginx
    container_name: nginx
    depends_on:
      - frontend
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/mime.types:/etc/nginx/mime.types:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - /etc/letsencrypt:/etc/letsencrypt
      - /var/www/certbot:/var/www/certbot
      - /home/ubuntu/MyFairy/frontend/dist:/usr/share/nginx/html:ro
    ports:
      - "2828:2828"
      - "443:443"
    networks:
      - app-network

  # Certbot (SSL 갱신)
  certbot:
    container_name: certbot
    image: certbot/certbot:latest
    restart: unless-stopped
    depends_on:
      - nginx
    volumes:
      - /etc/letsencrypt:/etc/letsencrypt
      - /var/www/certbot:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"

  # AI Blue – 기본적으로 외부 포트 매핑은 주석 처리됨
  ai-blue:
    build: ./AI
    container_name: ai-blue
    env_file:
      - ./config/AI.env
    networks:
      - app-network
    # 아래 ports 항목은 active 버전일 때 Jenkins가 sed로 언코멘트하여 외부(8000) 매핑함
    # ports:
    #   - "8000:8000"
    expose:
      - "8000"

  # AI Green – 기본적으로 외부 포트 매핑은 주석 처리됨
  ai-green:
    build: ./AI
    container_name: ai-green
    env_file:
      - ./config/AI.env
    networks:
      - app-network
    # ports:
    #   - "8000:8000"
    expose:
      - "8000"

volumes:
  mysql-data:

networks:
  app-network:
    driver: bridge
